<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Andy GogogO</title><link>https://andyt9527.github.io/</link><description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description><generator>Hugo 0.104.3 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>andytian1991@163.com (andy)</managingEditor><webMaster>andytian1991@163.com (andy)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Tue, 18 Oct 2022 09:15:19 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://andyt9527.github.io/rss.xml"/><item><title>使用Hugo和GitHub Pages搭建个人博客</title><link>https://andyt9527.github.io/tech/my_first_post/</link><guid isPermaLink="true">https://andyt9527.github.io/tech/my_first_post/</guid><pubDate>Tue, 13 Sep 2022 13:29:36 +0800</pubDate><author>andytian1991@163.com (andy)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="使用hugo和github-pages搭建个人博客">使用Hugo和GitHub Pages搭建个人博客&lt;/h1>
&lt;h1 id="hugo的安装和使用">Hugo的安装和使用&lt;/h1>
&lt;h2 id="hugo的安装">Hugo的安装&lt;/h2>
&lt;p>初步使用Hugo的话，只需要跟随官网的文档过一遍Quick Start就可以了解基本的安装、使用方法了。
这里根据我自己在Ubuntu 20.04部署经历进行简单的说明。&lt;/p>
&lt;blockquote>
&lt;p>sudo apt-get install hugo&lt;/p>
&lt;/blockquote>
&lt;p>等待安装完成之后，可以使用&lt;code>hugo version&lt;/code>命令来验证。&lt;/p>
&lt;h2 id="建立新站点">建立新站点&lt;/h2>
&lt;p>接下来从终端进入到你想要放置博客站点原始内容的目录下使用下面的命令来建立站点。&lt;/p>
&lt;blockquote>
&lt;p>hugo new site myblog&lt;/p>
&lt;/blockquote>
&lt;p>该命令会在当前目录下新建一个名为myblog的文件夹。你所有的站点文件都会在这个文件夹下面存放。&lt;/p>
&lt;h2 id="添加主题">添加主题&lt;/h2>
&lt;p>与其他的站点工具不同，Hugo没有默认的主题，需要先添加一个主题才能新建文章。Hugo的官网上有很多的主题可选。选定一个喜欢的主题之后，需要将其下载到myblog文件夹中。在主题说明的页面中点击&amp;quot;download&amp;quot;的按钮，会进入到对应的GitHub页面中。有很多种方式可以将主题文件下载，并放置到&lt;code>myblog/themes/&amp;lt;YOURTHEME&amp;gt;&lt;/code>文件夹中（&lt;code>&amp;lt;YOURTHEME&amp;gt;&lt;/code>是主题的名称，可以在该主题的GitHub仓库的页面看到）。
在这里为了使用git对站点进行管理，实现在不同的设备上方便的对站点进行维护，我们使用git的submodule功能。&lt;/p>
&lt;pre tabindex="0">&lt;code>cd myblog
git init
git submodule add https://github.com/budparr/gohugo-theme-&amp;lt;YOURTHEME&amp;gt;.git themes/&amp;lt;YOURTHEME&amp;gt;
&lt;/code>&lt;/pre>&lt;p>接下来，我们需要在配置文件中指名站点所使用的主题。打开&lt;code>config.toml&lt;/code>直接编辑或者使用&lt;code>echo 'theme = &amp;quot;&amp;lt;YOURTHEME&amp;gt;&amp;quot;' &amp;gt;&amp;gt; config.toml&lt;/code>命令。
配置文件中还有其他的可配置内容，这些根据实际主题配置修改即可。&lt;/p>
&lt;h2 id="新建文章">新建文章&lt;/h2>
&lt;p>新建文章可以使用如下的命令，或者直接在&lt;code>content/&amp;lt;CATEGORY&amp;gt;/&amp;lt;FILE&amp;gt;.&amp;lt;FORMAT&amp;gt;&lt;/code>里面手动创建。&lt;/p>
&lt;blockquote>
&lt;p>hugo new posts/my-first-post.md&lt;/p>
&lt;/blockquote>
&lt;p>在这里建议使用Hugo的new命令创建，因为根据主题不同，使用new命令创建的文件会包含简单的模版框架。例如：&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: my-first-post
date: 2020-06-13T19:45:22+08:00
lastmod: 2020-06-13T19:45:22+08:00
author: Author
cover: /post/xxx-cover.jpg
categories: [&amp;#34;技术&amp;#34;]
tags: [&amp;#34;Hugo&amp;#34;, &amp;#34;GitHub&amp;#34;]
draft: true
---
&lt;/code>&lt;/pre>&lt;p>具体的配置方式和参数的意义，请查看对应的主题说明。&lt;/p>
&lt;h3 id="文章中添加图片">文章中添加图片&lt;/h3>
&lt;p>Hugo的配置文件和文章中引用图片都是从static作为根目录的。也就是说上面例子中的/post/xxx-cover.jpg实际是在static文件夹中。&lt;/p>
&lt;pre tabindex="0">&lt;code>.
└── static
└── post
└── xxx-cover.jpg
&lt;/code>&lt;/pre>&lt;h2 id="开启hugo本地服务">开启Hugo本地服务&lt;/h2>
&lt;p>我们需要将Hugo本地服务跑起来，才能看到上面操作的成果，看到新的站点的样子。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server -D
| EN
+------------------+----+
Pages | 10
Paginator pages | 0
Non-page files | 0
Static files | 3
Processed images | 0
Aliases | 1
Sitemaps | 1
Cleaned | 0
Total in 11 ms
Watching for changes in /Users/workspace/myblog/{content,data,layouts,static,themes}
Watching for config changes in /Users/workspace/myblog/config.toml
Environment: &amp;#34;development&amp;#34;
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>打开&lt;code>http://localhost:1313/&lt;/code>，我们就可以看到刚才新建的站点了。此时标记为草稿的文章也会展示，但是在实际部署站点的时候需要将文章中的 &lt;code>draft: true&lt;/code>配置改为&lt;code>false&lt;/code>。在本地服务开启的时候，对站点的改变（修改配置，修改、新增文章等）会直接展示出来。&lt;/p>
&lt;h2 id="配置文件的修改">配置文件的修改&lt;/h2>
&lt;p>打开配置&lt;code>config.toml&lt;/code>可以看到很多的参数可以配置，这里只描述最基本的内容，不同的主题可能会支持不同的参数配置，具体请看对应主题的说明文档。&lt;/p>
&lt;p>&lt;code>baseURL&lt;/code>是站点的域名。
&lt;code>title&lt;/code>是站点的名称。
&lt;code>theme&lt;/code>是站点的主题。&lt;/p>
&lt;h1 id="在github-pages部署博客">在GitHub Pages部署博客&lt;/h1>
&lt;ol>
&lt;li>在 GitHub 创建仓库，仓库名称必须设置为 &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>，这个仓库仅存放生成的静态内容。&lt;/li>
&lt;li>在 GitHub 创建一个项目仓库 &lt;code>hugo-blog&lt;/code> 并添加为我们本地项目文件夹的远程仓库。这个仓库用来维护站点配置和原始的文章内容。&lt;/li>
&lt;/ol>
&lt;p>假设我们在已经通过上文的步骤在 public 文件夹中生成了想发布的静态内容，运行：&lt;/p>
&lt;p>&lt;code>git submodule add -b main https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public&lt;/code>
在 &lt;code>public&lt;/code> 目录中创建一个 git 子模块，之后这个目录将以 &lt;code>https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 作为远程仓库。&lt;/p>
&lt;blockquote>
&lt;p>Note: 确保配置文件中的 &lt;code>baseUrl&lt;/code> 已经设置为了 &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 为我们接下来的部署操作提供了一个自动化的 Shell 脚本：&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/sh
# 任一步骤执行失败都会终止整个部署过程
set -e
printf &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m\n&amp;#34;
# 构建静态内容
hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`
# 切换到 Public 文件夹
cd public
# 添加更改到 git
git add .
# 提交更改
msg=&amp;#34;rebuilding site $(date)&amp;#34;
if [ -n &amp;#34;$*&amp;#34; ]; then
msg=&amp;#34;$*&amp;#34;
fi
git commit -m &amp;#34;$msg&amp;#34;
# 推送到远程仓库
git push origin main
&lt;/code>&lt;/pre>&lt;p>将如上内容保存到&lt;code>deploy.sh&lt;/code>文件中，并执行&lt;code>chmod +x deploy.sh&lt;/code>为其添加可执行权限。接着执行部署脚本：&lt;code>./deploy.sh&lt;/code>
稍等几分钟就可以在 &lt;code>https://&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 看到我们的个人博客了。&lt;/p>
&lt;h1 id="通过-github-actions-自动部署">通过 GitHub Actions 自动部署&lt;/h1>
&lt;p>目前我们的「创作-发布」流程如下：&lt;/p>
&lt;ol>
&lt;li>在项目仓库编辑原始内容并进行版本管理。&lt;/li>
&lt;li>执行自动脚本&lt;code>deploy.sh&lt;/code>生成静态站点并推送到个人主页仓库完成发布。&lt;/li>
&lt;/ol>
&lt;p>但是我们可以使用 GitHub Actions，在每次向远程的项目仓库推送原始内容更改时自动执行第 2 步进行发布来提升自动化水平。
GitHub 上有许多这类自动化部署任务的开源 Actions 项目，我选择了这个项目 &lt;a href="https://github.com/peaceiris/actions-hugo">GitHub Actions for Hugo&lt;/a>。具体的操作步骤截图和详细配置项可以查看该项目的README。
下面简单介绍下配置过程：&lt;/p>
&lt;ol>
&lt;li>在项目文件夹中添加目录和文件：&lt;code>.github/workflows/gh-pages.yml&lt;/code>，
下面是我个人的&lt;code>gh-pages.yml&lt;/code>配置:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>name: GitHub Pages
on:
push:
branches:
- main # Set a branch to deploy
pull_request:
jobs:
deploy:
runs-on: ubuntu-20.04
concurrency:
group: ${{ github.workflow }}-${{ github.ref }}
steps:
- uses: actions/checkout@v3
with:
submodules: true # Fetch Hugo themes (true OR recursive)
fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
- name: Setup Hugo
uses: peaceiris/actions-hugo@v2
with:
hugo-version: &amp;#39;latest&amp;#39;
# extended: true
- name: Build
run: hugo --minify
- name: Deploy
uses: peaceiris/actions-gh-pages@v3
if: ${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }}
with:
personal_token: ${{ secrets.HUGOBLOG }}
external_repository: andyt9527/andyt9527.github.io
publish_branch: main
publish_dir: ./public
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这里注意：&lt;/p>
&lt;ol>
&lt;li>external_repository 请对应做修改为你自己的Github Pages仓库地址&lt;/li>
&lt;li>personal_token的名字要和博客原仓库Settings-Secrets中添加的token名字一致&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>
&lt;p>添加GitHub Persional access tokens&lt;/p>
&lt;blockquote>
&lt;p>GitHub 账户下 Setting - Developer setting - Personal access tokens
权限需要开启 repo 与 workflow&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>在我们博客源仓库 &lt;code>hugo-blog&lt;/code> 的 Settings - Secrets - Actions 中添加 PERSONAL_TOKEN 环境变量为刚才的 Token， 这里注意token的名字要和&lt;code>gh-pages.yml&lt;/code>一致&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>完成上述配置后，推送代码至仓库，即可触发 GitHub Action，自动生成博客页面并推送至 GitHub Pages仓库。&lt;/p>
&lt;p>最后我们修改一下&lt;code>deplay.sh&lt;/code>,这样以后新建博客文章之后只需要再运行&lt;code>deplay.sh&lt;/code>把原仓库推送到github，然后github actions就会自动更新博客以供访问啦。&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/usr/bin/env bash
# If a command fails then the deploy stops
set -e
# Print out commands before executing them
set -x
# Add changes to source git.
git add .
# Commit changes.
msg=&amp;#34;Action in source git $(date)&amp;#34;
if [ -n &amp;#34;$*&amp;#34; ]; then
msg=&amp;#34;$*&amp;#34;
fi
git commit -m &amp;#34;$msg&amp;#34;
# Push source and build repos.
git push origin main
&lt;/code>&lt;/pre></description></item></channel></rss>